{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mmWave Cascade Radar Utility","text":"<p>Utility scripts for processing mmWave radar recordings, including downloading data, extracting frames, and generating Range-Azimuth spectrograms.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.9+</li> <li>Install dependencies:   <pre><code>pip install -r requirements.txt\n</code></pre></li> </ul>"},{"location":"#radar-capture","title":"Radar Capture","text":"<p>Record radar data using the mmWave Capture Toolkit.</p>"},{"location":"#download-recordings","title":"Download Recordings","text":"<ol> <li>Configure <code>download_frames.py</code>:<ul> <li>Set capture IDs and local save directory.</li> </ul> </li> <li>Run:    <pre><code>python download_frames.py\n</code></pre></li> </ol>"},{"location":"#extract-frames","title":"Extract Frames","text":"<ol> <li>Ensure <code>radar_utility.py</code> settings match your radar.</li> <li>Configure <code>process_frames.py</code>:<ul> <li>Set capture IDs and save directory.</li> </ul> </li> <li>Run:    <pre><code>python process_frames.py\n</code></pre></li> </ol>"},{"location":"#generate-spectrogram","title":"Generate Spectrogram","text":"<ol> <li>Configure FFT parameters in <code>param.py</code> if needed.</li> <li>Set up <code>azimuth_map.py</code>:<ul> <li>Define capture IDs and base directory.</li> </ul> </li> <li>Run:    <pre><code>python azimuth_map.py\n</code></pre></li> </ol>"},{"location":"#license","title":"License","text":"<p>Licensed under the MIT License.</p>"},{"location":"azimuth_map/","title":"Generate Spectrogram","text":"<p>Processes and visualizes radar data from locally stored mmWave radar files.</p> <p>This script reads, transforms, and saves radar frames by computing Range FFT, Doppler FFT, and Azimuth FFT</p> <p>If processed data already exists, it loads and visualizes it.</p> Usage <ul> <li>Ensure the <code>radar_utility.py</code> module is available.</li> <li>Modify <code>cases</code> to specify the capture IDs to process.</li> <li>Run the script in a Python environment.</li> </ul> Dependencies <ul> <li>numpy</li> <li>matplotlib</li> <li>tqdm</li> <li>radar_utility.py (contains helper functions)</li> </ul> <p>Attributes:</p> Name Type Description <code>cases</code> <code>range</code> <p>Specifies the range of radar capture IDs to process.</p> <code>base_dir</code> <code>str</code> <p>Directory where radar data is stored.</p> <code>show</code> <code>bool</code> <p>If True, displays the processed azimuth FFT visualization.</p>"},{"location":"download_frames/","title":"Download Recordings","text":"<p>Script to download radar data from an mmWave radar's DSP board via SCP.</p> <p>This script connects to the DSP board over SSH and transfers the specified radar data files to a local directory using <code>download_files</code> from <code>radar_utility.py</code>.</p> Usage <ul> <li>Modify <code>cases</code> to specify the capture IDs to download.</li> <li>Ensure SCP is configured with the necessary SSH access.</li> </ul> Dependencies <ul> <li><code>radar_utility.py</code> (must contain the <code>download_files</code> function).</li> <li><code>time</code> (standard Python library).</li> </ul> <p>Attributes:</p> Name Type Description <code>cases</code> <code>list</code> <p>List of radar capture IDs to download.</p> <code>remote_files</code> <code>list</code> <p>List of radar data files to transfer.</p>"},{"location":"process_frames/","title":"Extract Frames","text":"<p>Processes and saves radar frames from locally stored mmWave radar data.</p> <p>This script reads raw IQ data from binary files, reshapes it into structured frames, and saves each frame as a NumPy file for further analysis.</p> Usage <ul> <li>Ensure the <code>radar_utility.py</code> module is available in the same directory.</li> <li>Modify the <code>cases</code> list to specify which capture IDs to process.</li> <li>Run the script in a Python environment.</li> </ul> Dependencies <ul> <li>numpy</li> <li>tqdm</li> <li>radar_utility.py (contains helper functions)</li> </ul> <p>Attributes:</p> Name Type Description <code>cases</code> <code>range</code> <p>Specifies the range of radar capture IDs to process.</p> <code>remote_files</code> <code>list</code> <p>List of binary files required for processing.</p>"},{"location":"radar_utility/","title":"Radar Utility","text":""},{"location":"radar_utility/#radar_utility.clean_heatmap","title":"<code>clean_heatmap(fft_in, q)</code>","text":"<p>Applies percentile-based thresholding to clean a heatmap.</p> <p>Parameters:</p> Name Type Description Default <code>fft_in</code> <code>ndarray</code> <p>Input heatmap data (e.g., FFT output).</p> required <code>q</code> <code>float</code> <p>Percentile threshold (0-100). Values below this percentile are set to the threshold.</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: Processed heatmap with low values clipped.</p>"},{"location":"radar_utility/#radar_utility.download_files","title":"<code>download_files(remote_dir, local_dir, files, start_time)</code>","text":"<p>Downloads multiple radar data files from an mmWave radar's DSP board using SCP in parallel threads.</p> <p>Parameters:</p> Name Type Description Default <code>remote_dir</code> <code>str</code> <p>The directory path on the mmWave radar's DSP board containing the data files.</p> required <code>local_dir</code> <code>str</code> <p>The local directory where the files will be saved.</p> required <code>files</code> <code>list</code> <p>A list of file names to be downloaded.</p> required <code>start_time</code> <code>float</code> <p>The timestamp marking the start of the download process.</p> required"},{"location":"radar_utility/#radar_utility.get_doppler_fft","title":"<code>get_doppler_fft(range_fft, n=None, dc_offset=None)</code>","text":"<p>Computes the Doppler FFT of range-transformed data.</p> <p>Parameters:</p> Name Type Description Default <code>range_fft</code> <code>ndarray</code> <p>FFT-transformed range data.</p> required <code>n</code> <code>int</code> <p>FFT length. Defaults to None.</p> <code>None</code> <code>dc_offset</code> <code>bool</code> <p>If True, compensates for DC offset across all frames.                         If False, compensates within each Doppler bin. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: Doppler FFT output.</p>"},{"location":"radar_utility/#radar_utility.get_frames_count","title":"<code>get_frames_count(idx_path)</code>","text":"<p>Reads the number of frames from an index file.</p> <p>Parameters:</p> Name Type Description Default <code>idx_path</code> <code>str</code> <p>Path to the index binary file.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Number of frames in the dataset.</p>"},{"location":"radar_utility/#radar_utility.get_iq_data_per_chip","title":"<code>get_iq_data_per_chip(data_path, frame_id, samples_per_frame, config)</code>","text":"<p>Extracts in-phase (I) and quadrature (Q) data for a specific radar frame.</p> <p>Parameters:</p> Name Type Description Default <code>data_path</code> <code>str</code> <p>Path to the binary data file.</p> required <code>frame_id</code> <code>int</code> <p>Index of the frame to extract.</p> required <code>samples_per_frame</code> <code>int</code> <p>Total number of samples per frame.</p> required <code>config</code> <code>dict</code> <p>Radar configuration dictionary.</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: Extracted IQ data with shape (chirp_per_loop, rx_per_device, num_of_loops, adc_per_chirp, 2).</p>"},{"location":"radar_utility/#radar_utility.get_range_fft","title":"<code>get_range_fft(frames, n=None)</code>","text":"<p>Computes the Range FFT of radar frames.</p> <p>Parameters:</p> Name Type Description Default <code>frames</code> <code>ndarray</code> <p>Input radar frames.</p> required <code>n</code> <code>int</code> <p>FFT length. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: Range FFT output.</p>"},{"location":"radar_utility/#radar_utility.run_scp","title":"<code>run_scp(remote_path, local_path, start_time)</code>","text":"<p>Transfers a file from the mmWave radar's DSP board to a local machine using SCP.</p> <p>Parameters:</p> Name Type Description Default <code>remote_path</code> <code>str</code> <p>Full path to the file on the DSP board.</p> required <code>local_path</code> <code>str</code> <p>Destination path on the local machine.</p> required <code>start_time</code> <code>float</code> <p>Timestamp for tracking transfer duration.</p> required"}]}